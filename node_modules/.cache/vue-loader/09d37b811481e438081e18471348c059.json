{"remainingRequest":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiekun/Pictures/sabi/dasabi/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/xiekun/Pictures/sabi/dasabi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xiekun/Pictures/sabi/dasabi/src/components/Cardies.vue?vue&type=template&id=8c550f72&scoped=true&","dependencies":[{"path":"/Users/xiekun/Pictures/sabi/dasabi/src/components/Cardies.vue","mtime":1592576376776},{"path":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgWwogICAgICBfYygic2VjdGlvbiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBhZ2UtaGVhZGVyIiB9LCBbCiAgICAgICAgICBfYygiaDEiLCBbCiAgICAgICAgICAgIF92bS5fdigiTWF0ZXJpYWwgY2FyZHMiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJzbWFsbCIsIFtfdm0uX3YoIm1hdGVyaWFsIGNhcmRzIHdpdGggYSBzaW1wbGUganF1ZXJ5IHNjcmlwdCIpXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgYWN0aXZlLXdpdGgtY2xpY2siIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgY29sLXNtLTYgY29sLXhzLTEyIiB9LCBbCiAgICAgICAgICAgIF9jKCJhcnRpY2xlIiwgeyBzdGF0aWNDbGFzczogIm1hdGVyaWFsLWNhcmQgUmVkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImgyIiwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJDaHJpc3RvcGhlciBXYWxrZW4iKV0pLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtc3RhciIgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIFRoZSBEZWVyIEh1bnRlciAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW1nLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8yNjkxMzEwL2dpdGh1Yi9tYXRlcmlhbC1jYXJkL3RodW1iLWNocmlzdG9waGVyLXdhbGtlbi5qcGciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWRlc2NyaXB0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEhlIGhhcyBhcHBlYXJlZCBpbiBtb3JlIHRoYW4gMTAwIGZpbG1zIGFuZCB0ZWxldmlzaW9uIHNob3dzLCBpbmNsdWRpbmcgVGhlIERlZXIgSHVudGVyLCBBbm5pZSBIYWxsLCBUaGUgUHJvcGhlY3kgdHJpbG9neSwgVGhlIERvZ3Mgb2YgV2FyIC4uLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibWMtYnRuLWFjdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtYmFycyIgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWZvb3RlciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiIFNvY2lhbCAiKV0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZmFjZWJvb2siIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtdHdpdHRlciIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1saW5rZWRpbiIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1nb29nbGUtcGx1cyIgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IGNvbC1zbS02IGNvbC14cy0xMiIgfSwgWwogICAgICAgICAgICBfYygiYXJ0aWNsZSIsIHsgc3RhdGljQ2xhc3M6ICJtYXRlcmlhbC1jYXJkIFBpbmsiIH0sIFsKICAgICAgICAgICAgICBfYygiaDIiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIlNlYW4gUGVubiIpXSksCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1zdGFyIiB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTXlzdGljIFJpdmVyICIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWctY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzI2OTEzMTAvZ2l0aHViL21hdGVyaWFsLWNhcmQvdGh1bWItc2Vhbi1wZW5uLmpwZyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZGVzY3JpcHRpb24iIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgSGUgaGFzIHdvbiB0d28gQWNhZGVteSBBd2FyZHMsIGZvciBoaXMgcm9sZXMgaW4gdGhlIG15c3RlcnkgZHJhbWEgTXlzdGljIFJpdmVyICgyMDAzKSBhbmQgdGhlIGJpb3BpYyBNaWxrICgyMDA4KS4gUGVubiBiZWdhbiBoaXMgYWN0aW5nIGNhcmVlciBpbiB0ZWxldmlzaW9uIHdpdGggYSBicmllZiBhcHBlYXJhbmNlIGluIGEgMTk3NCBlcGlzb2RlIG9mIExpdHRsZSBIb3VzZSBvbiB0aGUgUHJhaXJpZSAuLi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm1jLWJ0bi1hY3Rpb24iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWJhcnMiIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1mb290ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTb2NpYWwgIildKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWZhY2Vib29rIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXR3aXR0ZXIiIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtbGlua2VkaW4iIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoImFydGljbGUiLCB7IHN0YXRpY0NsYXNzOiAibWF0ZXJpYWwtY2FyZCBQdXJwbGUiIH0sIFsKICAgICAgICAgICAgICBfYygiaDIiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIkNsaW50IEVhc3R3b29kIildKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXN0YXIiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBNaWxsaW9uIERvbGxhciBCYWJ5ICIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWctY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzI2OTEzMTAvZ2l0aHViL21hdGVyaWFsLWNhcmQvdGh1bWItY2xpbnQtZWFzdHdvb2QuanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBIZSByb3NlIHRvIGludGVybmF0aW9uYWwgZmFtZSB3aXRoIGhpcyByb2xlIGFzIHRoZSBNYW4gd2l0aCBObyBOYW1lIGluIFNlcmdpbyBMZW9uZSdzIERvbGxhcnMgdHJpbG9neSBvZiBzcGFnaGV0dGkgV2VzdGVybnMgZHVyaW5nIHRoZSAxOTYwcyAuLi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm1jLWJ0bi1hY3Rpb24iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWJhcnMiIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1mb290ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTb2NpYWwgIildKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWZhY2Vib29rIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXR3aXR0ZXIiIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtbGlua2VkaW4iIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoImFydGljbGUiLCB7IHN0YXRpY0NsYXNzOiAibWF0ZXJpYWwtY2FyZCBEZWVwLVB1cnBsZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiRHVzdGluIEhvZmZtYW4iKV0pLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtc3RhciIgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIEtyYW1lciB2cy4gS3JhbWVyICIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWctY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzI2OTEzMTAvZ2l0aHViL21hdGVyaWFsLWNhcmQvdGh1bWItZHVzdGluLWhvZmZtYW4uanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBIZSBoYXMgYmVlbiBrbm93biBmb3IgaGlzIHZlcnNhdGlsZSBwb3J0cmF5YWxzIG9mIGFudGloZXJvZXMgYW5kIHZ1bG5lcmFibGUgY2hhcmFjdGVycy5bM10gSGUgd29uIHRoZSBBY2FkZW15IEF3YXJkIGZvciBLcmFtZXIgdnMuIEtyYW1lciBpbiAxOTc5IC4uLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibWMtYnRuLWFjdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtYmFycyIgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWZvb3RlciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiIFNvY2lhbCAiKV0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZmFjZWJvb2siIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtdHdpdHRlciIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1saW5rZWRpbiIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1nb29nbGUtcGx1cyIgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IGNvbC1zbS02IGNvbC14cy0xMiIgfSwgWwogICAgICAgICAgICBfYygiYXJ0aWNsZSIsIHsgc3RhdGljQ2xhc3M6ICJtYXRlcmlhbC1jYXJkIEluZGlnbyIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiRWR3YXJkIE5vcnRvbiIpXSksCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1zdGFyIiB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQW1lcmljYW4gSGlzdG9yeSBYICIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWctY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzI2OTEzMTAvZ2l0aHViL21hdGVyaWFsLWNhcmQvdGh1bWItZWR3YXJkLW5vcnRvbi5qcGciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWRlc2NyaXB0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEhlIGhhcyBiZWVuIG5vbWluYXRlZCBmb3IgdGhyZWUgQWNhZGVteSBBd2FyZHMgZm9yIGhpcyB3b3JrIGluIHRoZSBmaWxtcyBQcmltYWwgRmVhciwgQW1lcmljYW4gSGlzdG9yeSBYIGFuZCBCaXJkbWFuLiBIZSBhbHNvIHN0YXJyZWQgaW4gb3RoZXIgcm9sZXMgLi4uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJtYy1idG4tYWN0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1iYXJzIiB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCIgU29jaWFsICIpXSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1mYWNlYm9vayIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS10d2l0dGVyIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWxpbmtlZGluIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgY29sLXNtLTYgY29sLXhzLTEyIiB9LCBbCiAgICAgICAgICAgIF9jKCJhcnRpY2xlIiwgeyBzdGF0aWNDbGFzczogIm1hdGVyaWFsLWNhcmQgQmx1ZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiTWljaGFlbCBDYWluZSIpXSksCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1zdGFyIiB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRWR1Y2F0ZWQgUml0YSAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW1nLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8yNjkxMzEwL2dpdGh1Yi9tYXRlcmlhbC1jYXJkL3RodW1iLW1pY2hhZWwtY2FpbmUuanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBFbmdsaXNoIGFjdG9yIGFuZCBhdXRob3IuIFJlbm93bmVkIGZvciBoaXMgZGlzdGluY3RpdmUgd29ya2luZyBjbGFzcyBjb2NrbmV5IGFjY2VudCwgQ2FpbmUgaGFzIGFwcGVhcmVkIGluIG92ZXIgMTE1IGZpbG1zIGFuZCBpcyByZWdhcmRlZCBhcyBhIEJyaXRpc2ggLi4uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJtYy1idG4tYWN0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1iYXJzIiB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCIgU29jaWFsICIpXSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1mYWNlYm9vayIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS10d2l0dGVyIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWxpbmtlZGluIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgY29sLXNtLTYgY29sLXhzLTEyIiB9LCBbCiAgICAgICAgICAgIF9jKCJhcnRpY2xlIiwgeyBzdGF0aWNDbGFzczogIm1hdGVyaWFsLWNhcmQgTGlnaHQtQmx1ZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiSGFydmV5IEtlaXRlbCIpXSksCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1zdGFyIiB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgUHVscCBGaWN0aW9uICIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWctY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzI2OTEzMTAvZ2l0aHViL21hdGVyaWFsLWNhcmQvdGh1bWItaGFydmV5LWtlaXRlbC5qcGciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWRlc2NyaXB0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFNvbWUgb2YgaGlzIG1vc3Qgbm90YWJsZSBzdGFycmluZyByb2xlcyB3ZXJlIGluIE1hcnRpbiBTY29yc2VzZSdzIE1lYW4gU3RyZWV0cyBhbmQgVGF4aSBEcml2ZXIsIFJpZGxleSBTY290dCdzIFRoZSBEdWVsbGlzdHMgYW5kIFRoZWxtYSAmIExvdWlzZSwgUXVlbnRpbiBUYXJhbnRpbm8gLi4uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJtYy1idG4tYWN0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1iYXJzIiB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCIgU29jaWFsICIpXSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1mYWNlYm9vayIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS10d2l0dGVyIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWxpbmtlZGluIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgY29sLXNtLTYgY29sLXhzLTEyIiB9LCBbCiAgICAgICAgICAgIF9jKCJhcnRpY2xlIiwgeyBzdGF0aWNDbGFzczogIm1hdGVyaWFsLWNhcmQgQ3lhbiIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiSmFjayBOaWNob2xzb24iKV0pLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtc3RhciIgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIFRoZSBTaGluaW5nICIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWctY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzI2OTEzMTAvZ2l0aHViL21hdGVyaWFsLWNhcmQvdGh1bWItamFjay1uaWNob2xzb24uanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaHJvdWdob3V0IGhpcyBjYXJlZXIsIE5pY2hvbHNvbiBoYXMgcG9ydHJheWVkIHVuaXF1ZSBhbmQgY2hhbGxlbmdpbmcgcm9sZXMsIG1hbnkgb2Ygd2hpY2ggaW5jbHVkZSBkYXJrIHBvcnRyYXlhbHMgb2YgZXhjaXRhYmxlLCBuZXVyb3RpYyBhbmQgcHN5Y2hvcGF0aGljIGNoYXJhY3RlcnMgLi4uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJtYy1idG4tYWN0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1iYXJzIiB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCIgU29jaWFsICIpXSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1mYWNlYm9vayIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS10d2l0dGVyIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWxpbmtlZGluIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgY29sLXNtLTYgY29sLXhzLTEyIiB9LCBbCiAgICAgICAgICAgIF9jKCJhcnRpY2xlIiwgeyBzdGF0aWNDbGFzczogIm1hdGVyaWFsLWNhcmQgVGVhbCIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiSmVmZiBCcmlkZ2VzIildKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXN0YXIiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBUaGUgQmlnIExlYm93c2tpICIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWctY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzI2OTEzMTAvZ2l0aHViL21hdGVyaWFsLWNhcmQvdGh1bWItamVmZi1icmlkZ2VzLmpwZyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZGVzY3JpcHRpb24iIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgSGUgY29tZXMgZnJvbSBhIHdlbGwta25vd24gYWN0aW5nIGZhbWlseSBhbmQgYmVnYW4gaGlzIHRlbGV2aXNlZCBhY3RpbmcgaW4gMTk1OCBhcyBhIGNoaWxkIHdpdGggaGlzIGZhdGhlciwgTGxveWQgQnJpZGdlcywgYW5kIGJyb3RoZXIsIEJlYXUsIG9uIHRlbGV2aXNpb24ncyBTZWEgSHVudCAuLi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm1jLWJ0bi1hY3Rpb24iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWJhcnMiIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1mb290ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTb2NpYWwgIildKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWZhY2Vib29rIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXR3aXR0ZXIiIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtbGlua2VkaW4iIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoImFydGljbGUiLCB7IHN0YXRpY0NsYXNzOiAibWF0ZXJpYWwtY2FyZCBHcmVlbiIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiSm9hcXVpbiBQaG9lbml4IildKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXN0YXIiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBIZXIgIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZy1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1yZXNwb25zaXZlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9kbC5kcm9wYm94dXNlcmNvbnRlbnQuY29tL3UvMjY5MTMxMC9naXRodWIvbWF0ZXJpYWwtY2FyZC90aHVtYi1qb2FxdWluLXBob2VuaXguanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBpcyBhbiBBbWVyaWNhbiBhY3RvciwgcHJvZHVjZXIsIG11c2ljIHZpZGVvIGRpcmVjdG9yLCBtdXNpY2lhbiBhbmQgYWN0aXZpc3QuIEZvciBoaXMgd29yayBhcyBhbiBhcnRpc3QsIFBob2VuaXggaGFzIHJlY2VpdmVkIGEgR3JhbW15IEF3YXJkLCBhIEdvbGRlbiBHbG9iZSBBd2FyZCBhbmQgdGhyZWUgQWNhZGVteSAuLi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm1jLWJ0bi1hY3Rpb24iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWJhcnMiIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1mb290ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTb2NpYWwgIildKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWZhY2Vib29rIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXR3aXR0ZXIiIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtbGlua2VkaW4iIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoImFydGljbGUiLCB7IHN0YXRpY0NsYXNzOiAibWF0ZXJpYWwtY2FyZCBMaWdodC1HcmVlbiIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiVG9tIEhhbmtzIildKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXN0YXIiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBGb3JyZXN0IEd1bXAgIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZy1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1yZXNwb25zaXZlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9kbC5kcm9wYm94dXNlcmNvbnRlbnQuY29tL3UvMjY5MTMxMC9naXRodWIvbWF0ZXJpYWwtY2FyZC90aHVtYi10b20taGFua3MuanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBIZSBpcyBrbm93biBmb3IgaGlzIHJvbGVzIGluIEJpZyAoMTk4OCksIFBoaWxhZGVscGhpYSAoMTk5MyksIEZvcnJlc3QgR3VtcCAoMTk5NCksIEFwb2xsbyAxMyAoMTk5NSksIFNhdmluZyBQcml2YXRlIFJ5YW4sIFlvdSd2ZSBHb3QgTWFpbCAoYm90aCAxOTk4KSwgVGhlIEdyZWVuIE1pbGUgKDE5OTkpLCBDYXN0IEF3YXkgKDIwMDApIC4uLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibWMtYnRuLWFjdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtYmFycyIgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWZvb3RlciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiIFNvY2lhbCAiKV0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZmFjZWJvb2siIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtdHdpdHRlciIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1saW5rZWRpbiIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1nb29nbGUtcGx1cyIgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IGNvbC1zbS02IGNvbC14cy0xMiIgfSwgWwogICAgICAgICAgICBfYygiYXJ0aWNsZSIsIHsgc3RhdGljQ2xhc3M6ICJtYXRlcmlhbC1jYXJkIExpbWUiIH0sIFsKICAgICAgICAgICAgICBfYygiaDIiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIlBoaWxpcCBTZXltb3VyIEhvZmZtYW4iKV0pLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtc3RhciIgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIDI1dGggSG91ciAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW1nLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8yNjkxMzEwL2dpdGh1Yi9tYXRlcmlhbC1jYXJkL3RodW1iLXBoaWxpcC1zZXltb3VyLWhvZmZtYW4uanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBCZXN0IGtub3duIGZvciBoaXMgZGlzdGluY3RpdmUgc3VwcG9ydGluZyBhbmQgY2hhcmFjdGVyIHJvbGVzIOKAkyB0eXBpY2FsbHkgbG93bGlmZXMsIGJ1bGxpZXMsIGFuZCBtaXNmaXRzIOKAkyBIb2ZmbWFuIHdhcyBhIHJlZ3VsYXIgcHJlc2VuY2UgaW4gZmlsbXMgZnJvbSB0aGUgZWFybHkgMTk5MHMgdW50aWwgaGlzIGRlYXRoIGF0IGFnZSA0Ni4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm1jLWJ0bi1hY3Rpb24iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWJhcnMiIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1mb290ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTb2NpYWwgIildKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWZhY2Vib29rIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXR3aXR0ZXIiIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtbGlua2VkaW4iIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoImFydGljbGUiLCB7IHN0YXRpY0NsYXNzOiAibWF0ZXJpYWwtY2FyZCBZZWxsb3ciIH0sIFsKICAgICAgICAgICAgICBfYygiaDIiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIlBhdWwgTmV3bWFuIildKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXN0YXIiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBUaGUgQ29sb3Igb2YgTW9uZXkgIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZy1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1yZXNwb25zaXZlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9kbC5kcm9wYm94dXNlcmNvbnRlbnQuY29tL3UvMjY5MTMxMC9naXRodWIvbWF0ZXJpYWwtY2FyZC90aHVtYi1wYXVsLW5ld21hbi5qcGciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWRlc2NyaXB0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEhlIHdvbiBudW1lcm91cyBhd2FyZHMsIGluY2x1ZGluZyBhbiBBY2FkZW15IEF3YXJkIGZvciBoaXMgcGVyZm9ybWFuY2UgaW4gdGhlIDE5ODYgZmlsbSBUaGUgQ29sb3Igb2YgTW9uZXksWzNdIGEgQkFGVEEgQXdhcmQsIGEgU2NyZWVuIEFjdG9ycyBHdWlsZCBBd2FyZCwgYSBDYW5uZXMgRmlsbSBGZXN0aXZhbCBBd2FyZCwgYW4gRW1teSBBd2FyZCAuLi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm1jLWJ0bi1hY3Rpb24iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWJhcnMiIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1mb290ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTb2NpYWwgIildKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWZhY2Vib29rIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXR3aXR0ZXIiIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtbGlua2VkaW4iIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoImFydGljbGUiLCB7IHN0YXRpY0NsYXNzOiAibWF0ZXJpYWwtY2FyZCBBbWJlciIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiTWFybG9uIEJyYW5kbyIpXSksCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1zdGFyIiB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgVGhlIEdvZGZhdGhlciAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW1nLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8yNjkxMzEwL2dpdGh1Yi9tYXRlcmlhbC1jYXJkL3RodW1iLW1hcmxvbi1icmFuZG8uanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBIZSBpcyBoYWlsZWQgZm9yIGJyaW5naW5nIGEgZ3JpcHBpbmcgcmVhbGlzbSB0byBmaWxtIGFjdGluZywgYW5kIGlzIGZyZXF1ZW50bHkgY2l0ZWQgYXMgdGhlIGdyZWF0ZXN0IGFuZCBtb3N0IGluZmx1ZW50aWFsIGFjdG9yIG9mIGFsbCB0aW1lLlsyXSBBIGN1bHR1cmFsIGljb24sIEJyYW5kbyBpcyBtb3N0IGZhbW91cyBmb3IgaGlzIEFjYWRlbXkgLi4uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJtYy1idG4tYWN0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1iYXJzIiB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCIgU29jaWFsICIpXSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1mYWNlYm9vayIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS10d2l0dGVyIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWxpbmtlZGluIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgY29sLXNtLTYgY29sLXhzLTEyIiB9LCBbCiAgICAgICAgICAgIF9jKCJhcnRpY2xlIiwgeyBzdGF0aWNDbGFzczogIm1hdGVyaWFsLWNhcmQgT3JhbmdlIiB9LCBbCiAgICAgICAgICAgICAgX2MoImgyIiwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJLZXZpbiBTcGFjZXkiKV0pLAogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtc3RhciIgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIEFtZXJpY2FuIEJlYXV0eSAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW1nLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8yNjkxMzEwL2dpdGh1Yi9tYXRlcmlhbC1jYXJkL3RodW1iLWtldmluLXNwYWNleS5qcGciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWRlc2NyaXB0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEhlIGJlZ2FuIGhpcyBjYXJlZXIgYXMgYSBzdGFnZSBhY3RvciBkdXJpbmcgdGhlIDE5ODBzLCBiZWZvcmUgYmVpbmcgY2FzdCBpbiBzdXBwb3J0aW5nIHJvbGVzIGluIGZpbG0gYW5kIHRlbGV2aXNpb24uIEhlIGdhaW5lZCBjcml0aWNhbCBhY2NsYWltIGluIHRoZSBlYXJseSAxOTkwcywgY3VsbWluYXRpbmcgaW4gaGlzIGZpcnN0IEFjYWRlbXkgQXdhcmQgLi4uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJtYy1idG4tYWN0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1iYXJzIiB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCIgU29jaWFsICIpXSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1mYWNlYm9vayIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS10d2l0dGVyIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWxpbmtlZGluIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgY29sLXNtLTYgY29sLXhzLTEyIiB9LCBbCiAgICAgICAgICAgIF9jKCJhcnRpY2xlIiwgeyBzdGF0aWNDbGFzczogIm1hdGVyaWFsLWNhcmQgRGVlcC1PcmFuZ2UiIH0sIFsKICAgICAgICAgICAgICBfYygiaDIiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIlJvYmVydCBEZSBOaXJvIildKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXN0YXIiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBUYXh5IERyaXZlciAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW1nLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8yNjkxMzEwL2dpdGh1Yi9tYXRlcmlhbC1jYXJkL3RodW1iLXJvYmVydC1kZS1uaXJvLmpwZyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZGVzY3JpcHRpb24iIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgSGlzIGZpcnN0IG1ham9yIGZpbG0gcm9sZXMgd2VyZSBpbiB0aGUgc3BvcnRzIGRyYW1hIEJhbmcgdGhlIERydW0gU2xvd2x5ICgxOTczKSBhbmQgTWFydGluIFNjb3JzZXNlJ3MgY3JpbWUgZmlsbSBNZWFuIFN0cmVldHMgKDE5NzMpLiBJbiAxOTc0LCBhZnRlciBiZWluZyB0dXJuZWQgZG93biBmb3IgdGhlIHJvbGUgb2YgU29ubnkgQ29ybGVvbmUgaW4gdGhlIGNyaW1lIC4uLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibWMtYnRuLWFjdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtYmFycyIgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWZvb3RlciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiIFNvY2lhbCAiKV0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZmFjZWJvb2siIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtdHdpdHRlciIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1saW5rZWRpbiIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1nb29nbGUtcGx1cyIgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IGNvbC1zbS02IGNvbC14cy0xMiIgfSwgWwogICAgICAgICAgICBfYygiYXJ0aWNsZSIsIHsgc3RhdGljQ2xhc3M6ICJtYXRlcmlhbC1jYXJkIEJyb3duIiB9LCBbCiAgICAgICAgICAgICAgX2MoImgyIiwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJTdGV2ZSBNY3F1ZWVuIildKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXN0YXIiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBQYXBpbGxvbiAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW1nLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8yNjkxMzEwL2dpdGh1Yi9tYXRlcmlhbC1jYXJkL3RodW1iLXN0ZXZlLW1jcXVlZW4uanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgJyBDYWxsZWQgIlRoZSBLaW5nIG9mIENvb2wiLCBoaXMgImFudGktaGVybyIgcGVyc29uYSwgZGV2ZWxvcGVkIGF0IHRoZSBoZWlnaHQgb2YgdGhlIFZpZXRuYW0gV2FyLWVyYSBjb3VudGVyY3VsdHVyZSwgbWFkZSBoaW0gYSB0b3AgYm94LW9mZmljZSBkcmF3IG9mIHRoZSAxOTYwcyBhbmQgMTk3MHMuIE1jUXVlZW4gcmVjZWl2ZWQgYW4gQWNhZGVteSBBd2FyZCBub21pbmF0aW9uIGZvciBoaXMgLi4uICcKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJtYy1idG4tYWN0aW9uIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1iYXJzIiB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZm9vdGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCIgU29jaWFsICIpXSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS1mYWNlYm9vayIgfSksCiAgICAgICAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mdyBmYS10d2l0dGVyIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWxpbmtlZGluIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgY29sLXNtLTYgY29sLXhzLTEyIiB9LCBbCiAgICAgICAgICAgIF9jKCJhcnRpY2xlIiwgeyBzdGF0aWNDbGFzczogIm1hdGVyaWFsLWNhcmQgR3JleSIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiUnVndGVyIEhhdWVyIildKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXN0YXIiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBCbGFkZSBSdW5uZXIgIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZy1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1yZXNwb25zaXZlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9kbC5kcm9wYm94dXNlcmNvbnRlbnQuY29tL3UvMjY5MTMxMC9naXRodWIvbWF0ZXJpYWwtY2FyZC90aHVtYi1ydWd0ZXItaGF1ZXIuanBnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBCbG9uZGUsIGJsdWUtZXllZCwgdGFsbCBhbmQgaGFuZHNvbWUgRHV0Y2ggYWN0b3IgUnV0Z2VyIEhhdWVyIGhhcyBhbiBpbnRlcm5hdGlvbmFsIHJlcHV0YXRpb24gZm9yIHBsYXlpbmcgZXZlcnl0aGluZyBmcm9tIHJvbWFudGljIGxlYWRzIHRvIGFjdGlvbiBoZXJvZXMgdG8gc2luaXN0ZXIgdmlsbGFpbnMuIEhhdWVyIHdhcyBib3JuIGluIEJyZXVrZWxlbiwgYSB0b3duIGluIHRoZSBwcm92aW5jZSAuLi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm1jLWJ0bi1hY3Rpb24iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWJhcnMiIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1mb290ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTb2NpYWwgIildKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWZhY2Vib29rIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXR3aXR0ZXIiIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtbGlua2VkaW4iIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBjb2wtc20tNiBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoImFydGljbGUiLCB7IHN0YXRpY0NsYXNzOiAibWF0ZXJpYWwtY2FyZCBCbHVlLUdyZXkiIH0sIFsKICAgICAgICAgICAgICBfYygiaDIiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIk1vcmdhbiBGcmVlbWFuIildKSwKICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXN0YXIiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBHbG9yeSAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1jLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaW1nLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8yNjkxMzEwL2dpdGh1Yi9tYXRlcmlhbC1jYXJkL3RodW1iLW1vcmdhbi1mcmVlbWFuLmpwZyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWMtZGVzY3JpcHRpb24iIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgRnJlZW1hbiBoYXMgcmVjZWl2ZWQgQWNhZGVteSBBd2FyZCBub21pbmF0aW9ucyBmb3IgaGlzIHBlcmZvcm1hbmNlcyBpbiBTdHJlZXQgU21hcnQsIERyaXZpbmcgTWlzcyBEYWlzeSwgVGhlIFNoYXdzaGFuayBSZWRlbXB0aW9uIGFuZCBJbnZpY3R1cyAuLi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm1jLWJ0bi1hY3Rpb24iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWJhcnMiIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYy1mb290ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTb2NpYWwgIildKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLWZhY2Vib29rIiB9KSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZ3IGZhLXR3aXR0ZXIiIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtbGlua2VkaW4iIH0pLAogICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZncgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}