{"remainingRequest":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiekun/Pictures/sabi/dasabi/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/xiekun/Pictures/sabi/dasabi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xiekun/Pictures/sabi/dasabi/src/components/cardtest.vue?vue&type=template&id=1d163a9c&scoped=true&","dependencies":[{"path":"/Users/xiekun/Pictures/sabi/dasabi/src/components/cardtest.vue","mtime":1592574967939},{"path":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xiekun/Pictures/sabi/dasabi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}